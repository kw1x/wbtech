# Order Management System Makefile
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
COMPOSE_FILE := docker-compose.yml
PROJECT_NAME := l0
DB_NAME := ordersdb
DB_USER := postgres
DB_PASSWORD := postgres
KAFKA_TOPIC := orders
KAFKA_PARTITIONS := 1
KAFKA_REPLICATION := 1

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

.PHONY: help build up down restart clean logs status init-db init-kafka init setup test health check-containers

# –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
help:
	@echo "$(BLUE)üì¶ Order Management System - Makefile Commands$(NC)"
	@echo ""
	@echo "$(GREEN)üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@echo "  make setup         - –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (—Å–±–æ—Ä–∫–∞ + –∑–∞–ø—É—Å–∫ + –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)"
	@echo "  make up            - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  make down          - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  make restart       - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  make build         - –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤"
	@echo ""
	@echo "$(GREEN)üõ†Ô∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:$(NC)"
	@echo "  make init          - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ Kafka –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"
	@echo "  make init-db       - –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL"
	@echo "  make init-kafka    - –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ –≤ Kafka"
	@echo ""
	@echo "$(GREEN)üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:$(NC)"
	@echo "  make logs          - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  make logs-app      - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
	@echo "  make logs-kafka    - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ Kafka"
	@echo "  make logs-db       - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ PostgreSQL"
	@echo "  make status        - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
	@echo "  make health        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo ""
	@echo "$(GREEN)üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:$(NC)"
	@echo "  make test          - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API"
	@echo "  make test-api      - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints"
	@echo "  make create-order  - –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"
	@echo ""
	@echo "$(GREEN)üßπ –û—á–∏—Å—Ç–∫–∞:$(NC)"
	@echo "  make clean         - –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ + —É–¥–∞–ª–µ–Ω–∏–µ volumes)"
	@echo "  make clean-images  - –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"
	@echo "  make clean-all     - –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ"
	@echo "  make clear-orders  - –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–ë–î + –∫—ç—à)"

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build:
	@echo "$(BLUE)üî® –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) build

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
up:
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) up -d

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
down:
	@echo "$(BLUE)‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π
restart:
	@echo "$(BLUE)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down
	docker-compose -f $(COMPOSE_FILE) up --build -d
	@sleep 5
	@make init

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check-containers:
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) ps

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL
wait-db:
	@echo "$(YELLOW)‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL...$(NC)"
	@timeout=30; \
	while [ $$timeout -gt 0 ]; do \
		if docker exec $(PROJECT_NAME)-postgres-1 pg_isready -h localhost -p 5432 -U $(DB_USER) >/dev/null 2>&1; then \
			echo "$(GREEN)‚úÖ PostgreSQL –≥–æ—Ç–æ–≤!$(NC)"; \
			break; \
		fi; \
		echo "–û–∂–∏–¥–∞–Ω–∏–µ PostgreSQL... ($$timeout —Å–µ–∫)"; \
		sleep 2; \
		timeout=$$((timeout-2)); \
	done; \
	if [ $$timeout -le 0 ]; then \
		echo "$(RED)‚ùå Timeout: PostgreSQL –Ω–µ –≥–æ—Ç–æ–≤$(NC)"; \
		exit 1; \
	fi

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Kafka
wait-kafka:
	@echo "$(YELLOW)‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Kafka...$(NC)"
	@timeout=60; \
	while [ $$timeout -gt 0 ]; do \
		if docker exec $(PROJECT_NAME)-kafka-1 kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1; then \
			echo "$(GREEN)‚úÖ Kafka –≥–æ—Ç–æ–≤!$(NC)"; \
			break; \
		fi; \
		echo "–û–∂–∏–¥–∞–Ω–∏–µ Kafka... ($$timeout —Å–µ–∫)"; \
		sleep 3; \
		timeout=$$((timeout-3)); \
	done; \
	if [ $$timeout -le 0 ]; then \
		echo "$(RED)‚ùå Timeout: Kafka –Ω–µ –≥–æ—Ç–æ–≤$(NC)"; \
		exit 1; \
	fi

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init-db: wait-db
	@echo "$(BLUE)üóÑÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@if docker exec $(PROJECT_NAME)-postgres-1 psql -U $(DB_USER) -d $(DB_NAME) -c "\dt" | grep -q "orders"; then \
		echo "$(YELLOW)‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ orders —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç$(NC)"; \
	else \
		echo "$(GREEN)üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã orders...$(NC)"; \
		docker exec $(PROJECT_NAME)-postgres-1 psql -U $(DB_USER) -d $(DB_NAME) -c " \
			CREATE TABLE IF NOT EXISTS orders ( \
				order_uid VARCHAR(255) PRIMARY KEY, \
				track_number VARCHAR(255), \
				entry VARCHAR(255), \
				locale VARCHAR(10), \
				internal_signature VARCHAR(255), \
				customer_id VARCHAR(255), \
				delivery_service VARCHAR(255), \
				shardkey VARCHAR(10), \
				sm_id INTEGER, \
				date_created TIMESTAMP, \
				oof_shard VARCHAR(10), \
				delivery_name VARCHAR(255), \
				delivery_phone VARCHAR(50), \
				delivery_zip VARCHAR(20), \
				delivery_city VARCHAR(255), \
				delivery_address TEXT, \
				delivery_region VARCHAR(255), \
				delivery_email VARCHAR(255), \
				payment_transaction VARCHAR(255), \
				payment_request_id VARCHAR(255), \
				payment_currency VARCHAR(10), \
				payment_provider VARCHAR(255), \
				payment_amount INTEGER, \
				payment_dt BIGINT, \
				payment_bank VARCHAR(255), \
				payment_delivery_cost INTEGER, \
				payment_goods_total INTEGER, \
				payment_custom_fee INTEGER, \
				items JSONB \
			);"; \
		echo "$(GREEN)‚úÖ –¢–∞–±–ª–∏—Ü–∞ orders —Å–æ–∑–¥–∞–Ω–∞!$(NC)"; \
	fi

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka —Ç–æ–ø–∏–∫–æ–≤
init-kafka: wait-kafka
	@echo "$(BLUE)üì® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka —Ç–æ–ø–∏–∫–æ–≤...$(NC)"
	@if docker exec $(PROJECT_NAME)-kafka-1 kafka-topics.sh --bootstrap-server localhost:9092 --list | grep -q "^$(KAFKA_TOPIC)$$"; then \
		echo "$(YELLOW)‚ö†Ô∏è  –¢–æ–ø–∏–∫ $(KAFKA_TOPIC) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç$(NC)"; \
	else \
		echo "$(GREEN)üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ $(KAFKA_TOPIC)...$(NC)"; \
		docker exec $(PROJECT_NAME)-kafka-1 kafka-topics.sh \
			--bootstrap-server localhost:9092 \
			--create \
			--topic $(KAFKA_TOPIC) \
			--partitions $(KAFKA_PARTITIONS) \
			--replication-factor $(KAFKA_REPLICATION); \
		echo "$(GREEN)‚úÖ –¢–æ–ø–∏–∫ $(KAFKA_TOPIC) —Å–æ–∑–¥–∞–Ω!$(NC)"; \
	fi
	@echo "$(BLUE)üìã –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤:$(NC)"
	@docker exec $(PROJECT_NAME)-kafka-1 kafka-topics.sh --bootstrap-server localhost:9092 --list

# –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
init: init-db init-kafka
	@echo "$(GREEN)üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!$(NC)"

# –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
setup: down build up init
	@echo "$(GREEN)üöÄ –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω!$(NC)"
	@echo ""
	@echo "$(BLUE)üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ URLs:$(NC)"
	@echo "  ‚Ä¢ Frontend:    http://localhost:8080"
	@echo "  ‚Ä¢ API:         http://localhost:8080/orders"
	@echo "  ‚Ä¢ Swagger:     http://localhost:8080/swagger/index.html"
	@echo "  ‚Ä¢ Kafka UI:    http://localhost:8081"
	@echo "  ‚Ä¢ PostgreSQL:  localhost:5432"
	@echo "  ‚Ä¢ Kafka:       localhost:9092"
	@echo ""
	@make health

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
logs:
	@docker-compose -f $(COMPOSE_FILE) logs -f

logs-app:
	@docker-compose -f $(COMPOSE_FILE) logs -f app

logs-kafka:
	@docker-compose -f $(COMPOSE_FILE) logs -f kafka

logs-db:
	@docker-compose -f $(COMPOSE_FILE) logs -f postgres

# –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
status:
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) ps

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
health:
	@echo "$(BLUE)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	@echo ""
	@echo "$(YELLOW)üêò PostgreSQL:$(NC)"
	@if docker exec $(PROJECT_NAME)-postgres-1 pg_isready -h localhost -p 5432 -U $(DB_USER) >/dev/null 2>&1; then \
		echo "  $(GREEN)‚úÖ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç$(NC)"; \
	else \
		echo "  $(RED)‚ùå PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"; \
	fi
	@echo ""
	@echo "$(YELLOW)üì® Kafka:$(NC)"
	@if docker exec $(PROJECT_NAME)-kafka-1 kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1; then \
		echo "  $(GREEN)‚úÖ Kafka —Ä–∞–±–æ—Ç–∞–µ—Ç$(NC)"; \
		echo "  üìã –¢–æ–ø–∏–∫–∏: $$(docker exec $(PROJECT_NAME)-kafka-1 kafka-topics.sh --bootstrap-server localhost:9092 --list | tr '\n' ' ')"; \
	else \
		echo "  $(RED)‚ùå Kafka –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"; \
	fi
	@echo ""
	@echo "$(YELLOW)üöÄ Application:$(NC)"
	@if curl -s http://localhost:8080/orders >/dev/null 2>&1; then \
		echo "  $(GREEN)‚úÖ Application —Ä–∞–±–æ—Ç–∞–µ—Ç$(NC)"; \
		echo "  üìä –ó–∞–∫–∞–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: $$(curl -s http://localhost:8080/orders | jq length 2>/dev/null || echo 'N/A')"; \
	else \
		echo "  $(RED)‚ùå Application –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"; \
	fi

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
test-api:
	@echo "$(BLUE)üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...$(NC)"
	@echo ""
	@echo "$(YELLOW)1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:$(NC)"
	@curl -s -w "Status: %{http_code}\n" http://localhost:8080/orders | head -3
	@echo ""
	@echo "$(YELLOW)2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞:$(NC)"
	@curl -s -X POST -w "Status: %{http_code}\n" http://localhost:8080/orders/generate
	@echo ""

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
create-order:
	@echo "$(BLUE)üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞...$(NC)"
	@curl -X POST http://localhost:8080/orders/generate
	@echo ""

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
test: test-api
	@echo "$(GREEN)‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–ë–î + –∫—ç—à)
clear-orders:
	@echo "$(BLUE)üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–ë–î + –∫—ç—à)...$(NC)"
	@echo "$(RED)‚ö†Ô∏è  –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –∑–∞–∫–∞–∑—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ò –∫—ç—à–∞!$(NC)"
	@read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " confirm; \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		echo "$(BLUE)1. –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(NC)"; \
		docker exec $(PROJECT_NAME)-postgres-1 psql -U $(DB_USER) -d $(DB_NAME) -c "DELETE FROM orders;" > /dev/null; \
		echo "$(BLUE)2. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞)...$(NC)"; \
		docker-compose restart app > /dev/null; \
		echo "$(GREEN)‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã (–ë–î + –∫—ç—à)$(NC)"; \
	else \
		echo "$(YELLOW)–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞$(NC)"; \
	fi

# –û—á–∏—Å—Ç–∫–∞
clean:
	@echo "$(BLUE)üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down -v
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

# –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
clean-images:
	@echo "$(BLUE)üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	docker rmi $(PROJECT_NAME)-app:latest 2>/dev/null || true
	@echo "$(GREEN)‚úÖ –û–±—Ä–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã$(NC)"

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
clean-all: clean clean-images
	@echo "$(GREEN)üéØ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
monitor:
	@echo "$(BLUE)üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)...$(NC)"
	@while true; do \
		clear; \
		echo "$(BLUE)üìä Order Management System - Monitor$(NC)"; \
		echo "$(YELLOW)–í—Ä–µ–º—è: $$(date)$(NC)"; \
		echo ""; \
		make status; \
		echo ""; \
		make health; \
		sleep 10; \
	done

# –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
quick-restart:
	@echo "$(BLUE)‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...$(NC)"
	docker-compose -f $(COMPOSE_FILE) restart app
	@sleep 3
	@make health

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫
logs-errors:
	@echo "$(BLUE)üîç –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) logs | grep -i "error\|fail\|exception" || echo "$(GREEN)–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ$(NC)"

# Backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
backup-db:
	@echo "$(BLUE)üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@mkdir -p backups
	@docker exec $(PROJECT_NAME)-postgres-1 pg_dump -U $(DB_USER) $(DB_NAME) > backups/backup_$$(date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Backup —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ backups/$(NC)"

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
restore-db:
	@echo "$(BLUE)üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@echo "$(RED)‚ö†Ô∏è  –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ!$(NC)"
	@read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ backup (–≤ –ø–∞–ø–∫–µ backups/): " backup_file; \
	if [ -f "backups/$$backup_file" ]; then \
		docker exec -i $(PROJECT_NAME)-postgres-1 psql -U $(DB_USER) -d $(DB_NAME) < backups/$$backup_file; \
		echo "$(GREEN)‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞$(NC)"; \
	else \
		echo "$(RED)‚ùå –§–∞–π–ª backups/$$backup_file –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
	fi
